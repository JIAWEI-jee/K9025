C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\sour
                    -ce;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;..\HAEDWAR
                    -E\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\output\main.obj)

line level    source

   1          #define ALLOCATE_EXTERN
   2          #include "HC89F303.h"
   3          #include "intrins.h"//nop
   4          #include "uart.h"
   5          #include "delay.h"
   6          #include "key.h"
   7          #include "flash.h"
   8          #include "timer.h"
   9          #include "pwm.h"
  10          #include "lcd_display.h"
  11          #include "adc.h"
  12          #include "wdt.h"
  13          
  14          #define SKU 9018
  15          #define SOFT_VER "1.00.00"
  16          
  17          u16 adc_cnt = 0;
  18          u8  first_heat_std = 0,fault_std = 0;
  19          
  20          void Set_Temp ( u16 temp );
  21          void Controll_Heat ( u16 temp_set,u16 temp_now );
  22          void Protect ( void );
  23          void Error ( void );
  24          
  25          void device_init ( void )
  26          {
  27   1        /************************************系统初始化****************************************/
  28   1        // CLKSWR = 0x51;           //选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=16MHz
  29   1        CLKSWR = 0x53;  //8分频 32/8 = 4M
  30   1        CLKDIV = 0x01;            //Fosc 1分频得到Fcpu，Fcpu=16MHz
  31   1        P0M2 = 0x10;            //P02设置为非施密特数字输入
  32   1      }
  33          
  34          
  35          static void key_handle ( void )
  36          {
  37   1        u8 key_val = 0;
  38   1        if ( fault_std == 0 )
  39   1        {
  40   2          key_val = key_scan();
  41   2        }
  42   1        else
  43   1        {
  44   2          key_val = 0;
  45   2        }
  46   1        if ( (key_val == KEY_1_PRES)&&(calibration_std == 0) )
  47   1        {
  48   2          KEY_printf ( " key_scan\r\n" );
  49   2      
  50   2          if ( get_device_state() == ON )
  51   2          {
  52   3            
  53   3            set_device_state ( OFF );
C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 2   

  54   3            ht1621_all_clear();
  55   3            set_pwm ( 0 );
  56   3          }
  57   2          else
  58   2          {
  59   3            set_device_state ( ON );
  60   3            set_time_sec();
  61   3            
  62   3            first_heat_std = 1;
  63   3            set_correct_time ( flash_info.gap );
  64   3            lcd_display_gap ( flash_info.gap );
  65   3            lcd_display_time ( flash_info.timer );
  66   3            
  67   3          }
  68   2        }
  69   1        else if ( get_device_state() == ON )
  70   1        {
  71   2      
  72   2      
  73   2      
  74   2          if ( key_val == KEY_2_PRES ) //档位
  75   2          {
  76   3      
  77   3            KEY_printf ( " KEY_2_PRES\r\n" );
  78   3            if ( flash_info.gap < GAP_9 )
  79   3            {
  80   4              flash_info.gap++;
  81   4      
  82   4            }
  83   3            else
  84   3            {
  85   4              flash_info.gap = GAP_1;
  86   4            }
  87   3            if ( flash_info.gap > GAP_3 )
  88   3            {
  89   4              if ( flash_info.timer == TIMER_ON )
  90   4              {
  91   5                On_stay = 2;
  92   5              }
  93   4              else if ( flash_info.timer > TIMER_2H )
  94   4              {
  95   5                Gap_protect_std = 2;
  96   5              }
  97   4            }
  98   3      
  99   3            first_heat_std = 1;
 100   3            set_correct_time ( flash_info.gap );
 101   3            lcd_display_gap ( flash_info.gap );
 102   3            //set_time_sec();
 103   3            flah_save_data();
 104   3          }
 105   2          else if ( key_val == KEY_3_PRES ) //定时
 106   2          {
 107   3      
 108   3            if ( flash_info.timer < 0x05 )
 109   3            {
 110   4              flash_info.timer++;
 111   4            }
 112   3            else
 113   3            {
 114   4              flash_info.timer = TIMER_ON;
 115   4            }
C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 3   

 116   3           
 117   3      //      KEY_printf ( "timer:%d \r\n", ( u16 ) flash_info.timer );
 118   3            lcd_display_time ( flash_info.timer );
 119   3            set_time_sec();
 120   3            flah_save_data();
 121   3          }
 122   2        }
 123   1      }
 124          
 125          
 126          u16 calibration_temperature(u16 temper)
 127          {
 128   1        u8 temp1 = 0;
 129   1        if ( (usart_rx_flag == 2)&&(calibration_std == 1))
 130   1        { 
 131   2          temp1 = (u8)temper;
 132   2          usart_rx_flag = 0;
 133   2          flash_info.correct_std = 1;
 134   2      //    hal_uart_putchar(temp1);
 135   2      //    hal_uart_putchar(temper_val);
 136   2         if (temper_val > 15) 
 137   2         { 
 138   3          if (temper_val > temp1)
 139   3          {
 140   4            flash_info.correct_value = temper_val - temp1;
 141   4            flash_info.correct_sign = 1; //为正公差
 142   4          }
 143   3          else 
 144   3          {
 145   4           flash_info.correct_value = temp1 - temper_val;
 146   4            
 147   4            hal_uart_putchar(flash_info.correct_value);
 148   4           flash_info.correct_sign = 2; //为负公差
 149   4          } 
 150   3          if ((flash_info.correct_value < 2)||(flash_info.correct_value > 20))
 151   3          {
 152   4             flash_info.correct_value = 0;
 153   4             flash_info.correct_sign = 0;
 154   4          }
 155   3          flah_save_data();
 156   3          producte_send_cmd(0x02, 0x02);
 157   3         }
 158   2        }
 159   1          if (flash_info.correct_sign == 1)
 160   1        {
 161   2         return ((u16) (temper = temper + flash_info.correct_value) );
 162   2        }
 163   1        else if ( flash_info.correct_sign == 2)
 164   1        {
 165   2         return ((u16) (temper = temper - flash_info.correct_value) );
 166   2        }
 167   1        return ((u16) temper );
 168   1      
 169   1      } 
 170          
 171          
 172          
 173          u16 temp_calc ( u16 uR510,u16 uRw )
 174          {
 175   1        u16 i = 0;
 176   1        u16 basi_tmp = 20;
 177   1        float u1 = 0;
C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 4   

 178   1        
 179   1        if ( (uR510 < 50 ) || (uR510 > uRw))
 180   1        {
 181   2          return 0xff;
 182   2        }
 183   1      
 184   1       
 185   1        u1 = (  (( float ) uRw /1000) - (( float ) uR510/1000) ) / (( ( float ) uR510/1000)/510 );
 186   1        if (u1 < 0)  return 0xff;
 187   1      //  gm_printf ( "R = %f  \r\n",u1 );
 188   1        if (u1 < 450) return 0;
 189   1        if ( u1 > Temperature_Value )
 190   1        {
 191   2          
 192   2           i =  u1 - Temperature_Value;
 193   2          i= i/2.16;
 194   2          basi_tmp = basi_tmp + i;
 195   2          //gm_printf("basi_up20 = %d \r\n",basi_tmp);
 196   2        }
 197   1        else
 198   1        {
 199   2          i =Temperature_Value - u1;
 200   2          i= i/2.16;
 201   2          if (i > 20) i = 20;
 202   2          basi_tmp = basi_tmp - i;
 203   2          
 204   2          //gm_printf("basi_unnder20 = %d \r\n",basi_tmp);
 205   2        }
 206   1         //gm_printf("basi_tmpF:%d \r\n",basi_tmp);
 207   1        
 208   1        return ( basi_tmp );
 209   1      }
 210          
 211          
 212          
 213          void temperature_handle ( void )
 214          {
 215   1        u16 temp = 0;
 216   1        u16 adc_val1 = 0,adc_val3 = 0;
 217   1        static u8 error_std = 0;
 218   1        adc_cnt++;
 219   1      
 220   1        if ( adc_cnt > 10000 )
 221   1        {
 222   2          adc_cnt = 0;
 223   2          get_voltage ( &adc_val1,&adc_val3 );
 224   2      
 225   2          //  KEY_printf ( "adv1 = %d adv3 =%d \r\n",adc_val1,adc_val3 );  //pjw set
 226   2          temp = temp_calc ( adc_val1, adc_val3 );
 227   2      //      KEY_printf ( "temp val:%d \r\n",temp );
 228   2        temp =  calibration_temperature(temp);
 229   2          KEY_printf ( "%d \r\n",temp );
 230   2          
 231   2          if ( adc_val1 >50 )
 232   2          {
 233   3            if ( get_device_state() == ON )
 234   3            {
 235   4              if ( first_heat_std == 1 )
 236   4              {
 237   5                first_heat_std = 0;
 238   5                if ( temp > 50 )
 239   5                {
C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 5   

 240   6                  Heat_start_std = 2;
 241   6                  Open_Heat_Value = corrected_value_GAP_9_temp  ;
 242   6                }
 243   5                else
 244   5                {
 245   6                  Heat_start_std = 2;one_heat = 1;
 246   6                  Open_Heat_Value = corrected_value_warm_temp ;
 247   6                }
 248   5              }
 249   4              
 250   4              lcd_display_time ( flash_info.timer );
 251   4              lcd_display_gap ( flash_info.gap );
 252   4              Set_Temp ( temp );
 253   4            }
 254   3            else
 255   3            {
 256   4              if (calibration_std == 1)
 257   4              {
 258   5                  set_pwm ( 0 );
 259   5                ht1621_all_clear();
 260   5               lcd_display_gap ( flash_info.gap );
 261   5                cali_display_std = 1;
 262   5              }
 263   4              else
 264   4              { 
 265   5              set_pwm ( 0 );
 266   5              ht1621_send_cmd ( LCD_OFF );
 267   5              } 
 268   4            }
 269   3            fault_std = 0;
 270   3          }
 271   2          else
 272   2          {
 273   3            calibration_std = 0;
 274   3            cali_display_std = 0;
 275   3            ht1621_all_clear();
 276   3            set_pwm ( 0 );
 277   3            error_std = Error_STD;
 278   3            lcd_display_gap ( error_std );
 279   3            fault_std = 1;
 280   3          }
 281   2      
 282   2        }
 283   1      
 284   1      
 285   1      }
 286          
 287          
 288          
 289          
 290          void main ( void )
 291          {
 292   1        device_init();
 293   1      
 294   1        uart_init();
 295   1        adc_init();
 296   1        EA = 1;//开启总中断
 297   1        key_init();
 298   1        time0_init();
 299   1        flash_init();
 300   1        pwm_init ( 200 );
 301   1        init_lcd_ht1621b();
C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 6   

 302   1        delay_ms ( 800 );
 303   1        //ht1621_all_clear(); //消除鬼影
 304   1        wdt_init ( 2 );
 305   1        set_pwm ( 0 );
 306   1        gm_printf ( "\r\n==================================\r\n" );
 307   1        gm_printf ( "sku:K%d \r\n", ( u16 ) SKU );
 308   1        gm_printf ( "soft version:%s \r\n",SOFT_VER );
 309   1        gm_printf ( "gap %d \r\n", ( u16 ) flash_info.gap );      //挡位
 310   1        gm_printf ( "timer %d \r\n", ( u16 ) flash_info.timer );  // 时间长度
 311   1        gm_printf ( "==================================\r\n" );
 312   1      
 313   1        while ( 1 )
 314   1        {
 315   2          key_handle();
 316   2          temperature_handle();
 317   2         // Protect();
 318   2          //uart_handle();
 319   2          clear_wdt();
 320   2      
 321   2        }
 322   1      }
 323          
 324          
 325          void Controll_Heat ( u16 temp_set,u16 temp_now )
 326          {
 327   1      //KEY_printf ( "temp_set val:%d \r\n",temp_set );
 328   1        if ( temp_now >  temp_set   )
 329   1        {
 330   2          //  KEY_printf ( "close_heat \r\n");
 331   2          
 332   2          set_pwm ( 0 ); // 关闭加热丝
 333   2        }
 334   1        else if ( temp_now < ( temp_set - Open_Heat_Value ) )
 335   1        {
 336   2          //KEY_printf ( "open_heat \r\n");
 337   2          set_pwm ( 10 ); //打开加热丝
 338   2        }
 339   1      }
 340          
 341          void Set_Temp ( u16 temp )
 342          {
 343   1        if ( one_heat == 1 )
 344   1        {
 345   2          //KEY_printf ( "oneheat \r\n");
 346   2          Controll_Heat ( One_Heat_Temp,temp );
 347   2        }
 348   1        else
 349   1        {
 350   2        //  KEY_printf ( "twoheat \r\n");
 351   2          switch ( flash_info.gap )
 352   2          {
 353   3            case GAP_WARM:
 354   3              Controll_Heat ( GAP_WARM_temp,temp );
 355   3              break;
 356   3            case GAP_1:
 357   3              Controll_Heat ( GAP_1_temp,temp );
 358   3              break;
 359   3            case GAP_2:
 360   3              Controll_Heat ( GAP_2_temp,temp );
 361   3              break;
 362   3            case GAP_3:
 363   3              Controll_Heat ( GAP_3_temp,temp );
C51 COMPILER V9.56.0.0   MAIN                                                              08/28/2020 12:18:25 PAGE 7   

 364   3              break;
 365   3            case GAP_4:
 366   3              Controll_Heat ( GAP_4_temp,temp );
 367   3              break;
 368   3            case GAP_5:
 369   3              Controll_Heat ( GAP_5_temp,temp );
 370   3              break;
 371   3            case GAP_6:
 372   3              Controll_Heat ( GAP_6_temp,temp );
 373   3              break;
 374   3            case GAP_7:
 375   3              Controll_Heat ( GAP_7_temp,temp );
 376   3              break;
 377   3            case GAP_8:
 378   3              Controll_Heat ( GAP_8_temp,temp );
 379   3              break;
 380   3            case GAP_9:
 381   3              Controll_Heat ( GAP_9_temp,temp );
 382   3              break;
 383   3      
 384   3          }
 385   2        }
 386   1      }
 387          
 388          
 389          
 390          
 391          void Protect ( void )
 392          {
 393   1        if ( over_rang_time_std == 1 )
 394   1        {
 395   2          if ( flash_info.gap > GAP_3 )
 396   2          {
 397   3            flash_info.gap = GAP_3;
 398   3            lcd_display_gap ( flash_info.gap );
 399   3            flah_save_data();
 400   3            over_rang_time_std = 0;
 401   3          }
 402   2        }
 403   1      }
 404          
 405          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1659    ----
   CONSTANT SIZE    =    168    ----
   XDATA SIZE       =      5      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
